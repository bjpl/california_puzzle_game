import React, { useEffect, useState } from 'react';\nimport { calculateStreakBonus, SCORING_CONSTANTS } from '../utils/scoring';\n\ninterface ComboIndicatorProps {\n  currentStreak: number;\n  maxStreak: number;\n  isVisible: boolean;\n  onComboEnd?: () => void;\n  className?: string;\n}\n\ninterface ComboState {\n  isAnimating: boolean;\n  showNewStreak: boolean;\n  previousStreak: number;\n}\n\nconst COMBO_MESSAGES = [\n  { min: 3, max: 4, message: \"Nice!\", color: \"text-blue-600\", bg: \"bg-blue-100\" },\n  { min: 5, max: 7, message: \"Great!\", color: \"text-green-600\", bg: \"bg-green-100\" },\n  { min: 8, max: 10, message: \"Excellent!\", color: \"text-orange-600\", bg: \"bg-orange-100\" },\n  { min: 11, max: 15, message: \"Amazing!\", color: \"text-purple-600\", bg: \"bg-purple-100\" },\n  { min: 16, max: 20, message: \"Incredible!\", color: \"text-red-600\", bg: \"bg-red-100\" },\n  { min: 21, max: Infinity, message: \"LEGENDARY!\", color: \"text-pink-600\", bg: \"bg-pink-100\" }\n];\n\nconst STREAK_EMOJIS = [\n  \"ðŸ”¥\", \"âš¡\", \"ðŸ’«\", \"âœ¨\", \"ðŸŒŸ\", \"ðŸ’¥\", \"ðŸŽ¯\", \"ðŸš€\", \"ðŸ’Ž\", \"ðŸ‘‘\"\n];\n\nexport const ComboIndicator: React.FC<ComboIndicatorProps> = ({\n  currentStreak,\n  maxStreak,\n  isVisible,\n  onComboEnd,\n  className = ''\n}) => {\n  const [comboState, setComboState] = useState<ComboState>({\n    isAnimating: false,\n    showNewStreak: false,\n    previousStreak: 0\n  });\n  \n  const [displayStreak, setDisplayStreak] = useState(currentStreak);\n  \n  // Handle streak changes\n  useEffect(() => {\n    if (currentStreak > comboState.previousStreak && currentStreak >= SCORING_CONSTANTS.COMBO_THRESHOLD) {\n      // New streak achievement\n      setComboState({\n        isAnimating: true,\n        showNewStreak: true,\n        previousStreak: currentStreak\n      });\n      \n      // Animate the streak number\n      let start = displayStreak;\n      const increment = currentStreak > start ? 1 : -1;\n      const animateStreak = () => {\n        start += increment;\n        setDisplayStreak(start);\n        \n        if (start !== currentStreak) {\n          setTimeout(animateStreak, 50);\n        } else {\n          setTimeout(() => {\n            setComboState(prev => ({ ...prev, isAnimating: false }));\n          }, 1000);\n        }\n      };\n      \n      if (start !== currentStreak) {\n        setTimeout(animateStreak, 100);\n      }\n      \n    } else if (currentStreak === 0 && comboState.previousStreak > 0) {\n      // Combo ended\n      setComboState({\n        isAnimating: false,\n        showNewStreak: false,\n        previousStreak: 0\n      });\n      setDisplayStreak(0);\n      \n      if (onComboEnd) {\n        onComboEnd();\n      }\n    } else {\n      setDisplayStreak(currentStreak);\n      setComboState(prev => ({ ...prev, previousStreak: currentStreak }));\n    }\n  }, [currentStreak, comboState.previousStreak, displayStreak, onComboEnd]);\n  \n  // Don't render if streak is below threshold and not visible\n  if (!isVisible || (currentStreak < SCORING_CONSTANTS.COMBO_THRESHOLD && !comboState.isAnimating)) {\n    return null;\n  }\n  \n  // Get combo message and styling\n  const comboInfo = COMBO_MESSAGES.find(c => currentStreak >= c.min && currentStreak <= c.max) \n    || COMBO_MESSAGES[COMBO_MESSAGES.length - 1];\n  \n  // Get appropriate emoji\n  const emojiIndex = Math.min(Math.floor((currentStreak - 3) / 2), STREAK_EMOJIS.length - 1);\n  const emoji = STREAK_EMOJIS[Math.max(0, emojiIndex)];\n  \n  // Calculate streak bonus\n  const streakBonus = calculateStreakBonus(currentStreak);\n  \n  return (\n    <div className={`fixed top-20 left-1/2 transform -translate-x-1/2 z-50 ${className}`}>\n      <div className={\n        `${comboInfo.bg} ${comboInfo.color} px-6 py-3 rounded-full shadow-lg border-2 ` +\n        `transition-all duration-300 transform ${comboState.isAnimating ? 'animate-bounce scale-110' : 'scale-100'} ` +\n        `${currentStreak >= 10 ? 'animate-pulse' : ''}`\n      }>\n        <div className=\"flex items-center space-x-3\">\n          {/* Emoji with animation */}\n          <span className={\n            `text-2xl ${comboState.isAnimating ? 'animate-spin' : ''} ` +\n            `${currentStreak >= 15 ? 'animate-bounce' : ''}`\n          }>\n            {emoji}\n          </span>\n          \n          {/* Combo info */}\n          <div className=\"text-center\">\n            <div className=\"font-bold text-lg\">\n              {comboInfo.message}\n            </div>\n            <div className=\"text-sm font-semibold\">\n              {displayStreak} Streak\n            </div>\n            {streakBonus > 0 && (\n              <div className=\"text-xs font-medium\">\n                +{streakBonus.toLocaleString()} bonus\n              </div>\n            )}\n          </div>\n          \n          {/* Streak counter with animation */}\n          <div className=\"relative\">\n            <div className={\n              `text-3xl font-bold ${comboState.showNewStreak ? 'animate-pulse' : ''}`\n            }>\n              {displayStreak}\n            </div>\n            \n            {/* New streak indicator */}\n            {comboState.showNewStreak && comboState.isAnimating && (\n              <div className=\"absolute -top-2 -right-2 animate-ping\">\n                <span className=\"text-yellow-400 text-lg\">âœ¨</span>\n              </div>\n            )}\n          </div>\n        </div>\n        \n        {/* Max streak indicator */}\n        {currentStreak === maxStreak && maxStreak >= 5 && (\n          <div className=\"absolute -top-3 -right-3 bg-yellow-400 text-yellow-900 text-xs font-bold px-2 py-1 rounded-full animate-bounce\">\n            BEST!\n          </div>\n        )}\n        \n        {/* Legendary effects */}\n        {currentStreak >= 20 && (\n          <>\n            {/* Particle effects */}\n            <div className=\"absolute inset-0 pointer-events-none\">\n              {[...Array(6)].map((_, i) => (\n                <div \n                  key={i}\n                  className=\"absolute animate-ping\"\n                  style={{\n                    left: `${20 + (i * 12)}%`,\n                    top: `${10 + (i % 3) * 20}%`,\n                    animationDelay: `${i * 200}ms`,\n                    animationDuration: '1s'\n                  }}\n                >\n                  <span className=\"text-yellow-400 text-xs\">âœ¨</span>\n                </div>\n              ))}\n            </div>\n            \n            {/* Rainbow border effect */}\n            <div className=\"absolute inset-0 rounded-full animate-spin border-2 border-transparent bg-gradient-to-r from-red-500 via-yellow-500 via-green-500 via-blue-500 to-purple-500 opacity-50\" />\n          </>\n        )}\n      </div>\n      \n      {/* Combo multiplier bar */}\n      {currentStreak >= SCORING_CONSTANTS.COMBO_THRESHOLD && (\n        <div className=\"mt-2 px-4\">\n          <div className=\"bg-white bg-opacity-90 rounded-full p-1\">\n            <div className=\"bg-gray-200 rounded-full h-2 relative overflow-hidden\">\n              <div \n                className={\n                  `h-full rounded-full transition-all duration-500 ` +\n                  `${currentStreak < 5 ? 'bg-blue-500' : \n                    currentStreak < 10 ? 'bg-green-500' : \n                    currentStreak < 15 ? 'bg-orange-500' : \n                    currentStreak < 20 ? 'bg-purple-500' : \n                    'bg-gradient-to-r from-pink-500 to-red-500'}`\n                }\n                style={{ \n                  width: `${Math.min((currentStreak / Math.max(maxStreak, 10)) * 100, 100)}%` \n                }}\n              />\n              \n              {/* Shimmer effect for high streaks */}\n              {currentStreak >= 10 && (\n                <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white to-transparent opacity-30 animate-pulse\" />\n              )}\n            </div>\n            \n            <div className=\"text-center text-xs text-gray-600 mt-1\">\n              Multiplier: {Math.min(currentStreak * 0.1 + 1, SCORING_CONSTANTS.MAX_STREAK_MULTIPLIER).toFixed(1)}x\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ComboIndicator;