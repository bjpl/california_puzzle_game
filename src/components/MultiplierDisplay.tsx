import React, { useEffect, useState } from 'react';\nimport { SCORING_CONSTANTS } from '../utils/scoring';\n\ninterface MultiplierDisplayProps {\n  currentStreak: number;\n  accuracyMultiplier: number;\n  difficultyMultiplier: number;\n  timeMultiplier?: number;\n  isVisible: boolean;\n  size?: 'small' | 'medium' | 'large';\n  showBreakdown?: boolean;\n  className?: string;\n}\n\ninterface MultiplierState {\n  totalMultiplier: number;\n  isAnimating: boolean;\n  hasChanged: boolean;\n  previousTotal: number;\n}\n\nconst sizeConfigs = {\n  small: {\n    container: 'px-2 py-1',\n    text: 'text-sm',\n    multiplier: 'text-lg',\n    icon: 'text-base'\n  },\n  medium: {\n    container: 'px-3 py-2',\n    text: 'text-base',\n    multiplier: 'text-xl',\n    icon: 'text-lg'\n  },\n  large: {\n    container: 'px-4 py-3',\n    text: 'text-lg',\n    multiplier: 'text-2xl',\n    icon: 'text-xl'\n  }\n};\n\nexport const MultiplierDisplay: React.FC<MultiplierDisplayProps> = ({\n  currentStreak,\n  accuracyMultiplier,\n  difficultyMultiplier,\n  timeMultiplier = 1,\n  isVisible,\n  size = 'medium',\n  showBreakdown = false,\n  className = ''\n}) => {\n  const config = sizeConfigs[size];\n  \n  // Calculate streak multiplier\n  const streakMultiplier = currentStreak >= SCORING_CONSTANTS.COMBO_THRESHOLD \n    ? Math.min(\n        Math.pow(SCORING_CONSTANTS.STREAK_MULTIPLIER, currentStreak - SCORING_CONSTANTS.COMBO_THRESHOLD),\n        SCORING_CONSTANTS.MAX_STREAK_MULTIPLIER\n      )\n    : 1;\n  \n  // Calculate total multiplier\n  const totalMultiplier = streakMultiplier * accuracyMultiplier * difficultyMultiplier * timeMultiplier;\n  \n  const [multiplierState, setMultiplierState] = useState<MultiplierState>({\n    totalMultiplier,\n    isAnimating: false,\n    hasChanged: false,\n    previousTotal: totalMultiplier\n  });\n  \n  // Handle multiplier changes\n  useEffect(() => {\n    if (totalMultiplier !== multiplierState.previousTotal) {\n      setMultiplierState({\n        totalMultiplier,\n        isAnimating: true,\n        hasChanged: true,\n        previousTotal: totalMultiplier\n      });\n      \n      // Stop animation after a delay\n      const timer = setTimeout(() => {\n        setMultiplierState(prev => ({\n          ...prev,\n          isAnimating: false,\n          hasChanged: false\n        }));\n      }, 800);\n      \n      return () => clearTimeout(timer);\n    }\n  }, [totalMultiplier, multiplierState.previousTotal]);\n  \n  if (!isVisible) {\n    return null;\n  }\n  \n  // Determine color scheme based on multiplier value\n  const getColorScheme = () => {\n    if (totalMultiplier >= 4) {\n      return {\n        bg: 'bg-gradient-to-r from-purple-100 to-pink-100',\n        border: 'border-purple-400',\n        text: 'text-purple-800',\n        shadow: 'shadow-purple-200'\n      };\n    } else if (totalMultiplier >= 3) {\n      return {\n        bg: 'bg-gradient-to-r from-orange-100 to-red-100',\n        border: 'border-orange-400',\n        text: 'text-orange-800',\n        shadow: 'shadow-orange-200'\n      };\n    } else if (totalMultiplier >= 2) {\n      return {\n        bg: 'bg-gradient-to-r from-green-100 to-emerald-100',\n        border: 'border-green-400',\n        text: 'text-green-800',\n        shadow: 'shadow-green-200'\n      };\n    } else if (totalMultiplier > 1) {\n      return {\n        bg: 'bg-gradient-to-r from-blue-100 to-cyan-100',\n        border: 'border-blue-400',\n        text: 'text-blue-800',\n        shadow: 'shadow-blue-200'\n      };\n    } else {\n      return {\n        bg: 'bg-gray-100',\n        border: 'border-gray-300',\n        text: 'text-gray-600',\n        shadow: 'shadow-gray-200'\n      };\n    }\n  };\n  \n  const colorScheme = getColorScheme();\n  \n  // Get appropriate icon based on multiplier\n  const getIcon = () => {\n    if (totalMultiplier >= 4) return 'üëë';\n    if (totalMultiplier >= 3) return 'üî•';\n    if (totalMultiplier >= 2) return '‚ö°';\n    if (totalMultiplier > 1) return '‚ú®';\n    return '‚ûñ';\n  };\n  \n  // Get status text\n  const getStatusText = () => {\n    if (totalMultiplier >= 4) return 'LEGENDARY';\n    if (totalMultiplier >= 3) return 'AMAZING';\n    if (totalMultiplier >= 2) return 'GREAT';\n    if (totalMultiplier > 1) return 'GOOD';\n    return 'BASE';\n  };\n  \n  return (\n    <div className={`${className}`}>\n      <div className={\n        `${colorScheme.bg} ${colorScheme.border} ${colorScheme.text} ${colorScheme.shadow} ` +\n        `border-2 rounded-lg ${config.container} shadow-lg text-center transition-all duration-300 ` +\n        `${multiplierState.isAnimating ? 'animate-pulse scale-105' : 'scale-100'} ` +\n        `${totalMultiplier >= 3 ? 'animate-bounce' : ''}`\n      }>\n        {/* Main multiplier display */}\n        <div className=\"flex items-center justify-center space-x-2\">\n          <span className={`${config.icon} ${multiplierState.isAnimating ? 'animate-spin' : ''}`}>\n            {getIcon()}\n          </span>\n          \n          <div className=\"text-center\">\n            <div className={`font-bold ${config.multiplier}`}>\n              {totalMultiplier.toFixed(1)}x\n            </div>\n            <div className={`${config.text} font-semibold opacity-80`}>\n              {getStatusText()}\n            </div>\n          </div>\n          \n          {/* Change indicator */}\n          {multiplierState.hasChanged && multiplierState.isAnimating && (\n            <span className={`${config.text} animate-bounce font-bold`}>\n              {totalMultiplier > multiplierState.previousTotal ? '‚ÜóÔ∏è' : '‚ÜòÔ∏è'}\n            </span>\n          )}\n        </div>\n        \n        {/* Breakdown display */}\n        {showBreakdown && (\n          <div className={`mt-2 pt-2 border-t ${colorScheme.border} space-y-1`}>\n            <div className={`${config.text} font-semibold mb-1`}>Breakdown:</div>\n            \n            {/* Streak multiplier */}\n            {streakMultiplier > 1 && (\n              <div className=\"flex justify-between text-xs\">\n                <span className=\"flex items-center space-x-1\">\n                  <span>üî•</span>\n                  <span>Streak ({currentStreak})</span>\n                </span>\n                <span className=\"font-semibold\">{streakMultiplier.toFixed(1)}x</span>\n              </div>\n            )}\n            \n            {/* Accuracy multiplier */}\n            {accuracyMultiplier > 1 && (\n              <div className=\"flex justify-between text-xs\">\n                <span className=\"flex items-center space-x-1\">\n                  <span>üéØ</span>\n                  <span>Accuracy</span>\n                </span>\n                <span className=\"font-semibold\">{accuracyMultiplier.toFixed(1)}x</span>\n              </div>\n            )}\n            \n            {/* Difficulty multiplier */}\n            {difficultyMultiplier > 1 && (\n              <div className=\"flex justify-between text-xs\">\n                <span className=\"flex items-center space-x-1\">\n                  <span>üí™</span>\n                  <span>Difficulty</span>\n                </span>\n                <span className=\"font-semibold\">{difficultyMultiplier.toFixed(1)}x</span>\n              </div>\n            )}\n            \n            {/* Time multiplier */}\n            {timeMultiplier > 1 && (\n              <div className=\"flex justify-between text-xs\">\n                <span className=\"flex items-center space-x-1\">\n                  <span>‚ö°</span>\n                  <span>Speed</span>\n                </span>\n                <span className=\"font-semibold\">{timeMultiplier.toFixed(1)}x</span>\n              </div>\n            )}\n          </div>\n        )}\n        \n        {/* Special effects for high multipliers */}\n        {totalMultiplier >= 3 && (\n          <div className=\"absolute inset-0 pointer-events-none overflow-hidden rounded-lg\">\n            {/* Particle effects */}\n            {[...Array(3)].map((_, i) => (\n              <div \n                key={i}\n                className=\"absolute animate-ping\"\n                style={{\n                  left: `${20 + (i * 30)}%`,\n                  top: `${20 + (i % 2) * 40}%`,\n                  animationDelay: `${i * 300}ms`,\n                  animationDuration: '2s'\n                }}\n              >\n                <span className=\"text-yellow-400 text-xs opacity-70\">‚ú®</span>\n              </div>\n            ))}\n          </div>\n        )}\n        \n        {/* Legendary effects */}\n        {totalMultiplier >= 4 && (\n          <div className=\"absolute -inset-1 bg-gradient-to-r from-purple-400 via-pink-400 to-purple-400 rounded-lg opacity-30 animate-pulse\" />\n        )}\n      </div>\n      \n      {/* Progress bar to next multiplier threshold */}\n      {totalMultiplier < SCORING_CONSTANTS.MAX_STREAK_MULTIPLIER && currentStreak < 20 && (\n        <div className=\"mt-2\">\n          <div className=\"flex justify-between text-xs text-gray-600 mb-1\">\n            <span>Next Level</span>\n            <span>{Math.max(0, SCORING_CONSTANTS.COMBO_THRESHOLD + 1 - currentStreak)} more for boost</span>\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-1\">\n            <div \n              className=\"bg-gradient-to-r from-blue-400 to-purple-500 h-1 rounded-full transition-all duration-500\"\n              style={{ \n                width: `${Math.min((currentStreak / (SCORING_CONSTANTS.COMBO_THRESHOLD + 5)) * 100, 100)}%` \n              }}\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MultiplierDisplay;