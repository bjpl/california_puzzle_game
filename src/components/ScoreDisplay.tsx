import React, { useEffect, useState, useRef } from 'react';\nimport { ScoreCalculation, getScoreTier, formatScore } from '../utils/scoring';\n\ninterface ScoreDisplayProps {\n  currentScore: number;\n  lastScoreCalculation?: ScoreCalculation;\n  showBreakdown?: boolean;\n  animate?: boolean;\n  size?: 'small' | 'medium' | 'large';\n  className?: string;\n}\n\ninterface AnimationState {\n  isAnimating: boolean;\n  lastScore: number;\n  scoreIncrement: number;\n}\n\nconst sizeConfigs = {\n  small: {\n    scoreText: 'text-lg',\n    tierText: 'text-xs',\n    padding: 'p-2',\n    spacing: 'space-y-1'\n  },\n  medium: {\n    scoreText: 'text-2xl',\n    tierText: 'text-sm',\n    padding: 'p-3',\n    spacing: 'space-y-2'\n  },\n  large: {\n    scoreText: 'text-4xl',\n    tierText: 'text-lg',\n    padding: 'p-4',\n    spacing: 'space-y-3'\n  }\n};\n\nexport const ScoreDisplay: React.FC<ScoreDisplayProps> = ({\n  currentScore,\n  lastScoreCalculation,\n  showBreakdown = false,\n  animate = true,\n  size = 'medium',\n  className = ''\n}) => {\n  const [animationState, setAnimationState] = useState<AnimationState>({\n    isAnimating: false,\n    lastScore: currentScore,\n    scoreIncrement: 0\n  });\n  const [displayScore, setDisplayScore] = useState(currentScore);\n  const animationRef = useRef<number>();\n  const config = sizeConfigs[size];\n  \n  // Animate score changes\n  useEffect(() => {\n    if (!animate || currentScore === animationState.lastScore) return;\n    \n    const scoreDiff = currentScore - animationState.lastScore;\n    const isPositive = scoreDiff > 0;\n    \n    setAnimationState({\n      isAnimating: true,\n      lastScore: currentScore,\n      scoreIncrement: scoreDiff\n    });\n    \n    // Animate the score counting up/down\n    const startScore = displayScore;\n    const duration = Math.min(Math.abs(scoreDiff) * 2, 1000); // Max 1 second\n    const startTime = Date.now();\n    \n    const animateScore = () => {\n      const elapsed = Date.now() - startTime;\n      const progress = Math.min(elapsed / duration, 1);\n      \n      // Ease out animation\n      const easeProgress = 1 - Math.pow(1 - progress, 3);\n      const newScore = Math.round(startScore + (scoreDiff * easeProgress));\n      \n      setDisplayScore(newScore);\n      \n      if (progress < 1) {\n        animationRef.current = requestAnimationFrame(animateScore);\n      } else {\n        setAnimationState(prev => ({ ...prev, isAnimating: false }));\n      }\n    };\n    \n    animationRef.current = requestAnimationFrame(animateScore);\n    \n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, [currentScore, animate, animationState.lastScore, displayScore]);\n  \n  // Get current tier information\n  const scoreTier = getScoreTier(currentScore);\n  \n  // Calculate next tier progress\n  const nextTierIndex = [\n    { tier: 'Bronze', threshold: 0 },\n    { tier: 'Silver', threshold: 5000 },\n    { tier: 'Gold', threshold: 15000 },\n    { tier: 'Platinum', threshold: 30000 },\n    { tier: 'Diamond', threshold: 50000 },\n    { tier: 'Master', threshold: 75000 },\n    { tier: 'Grandmaster', threshold: 100000 }\n  ].findIndex(t => t.tier === scoreTier.tier);\n  \n  const nextTier = nextTierIndex < 6 ? [\n    { tier: 'Bronze', threshold: 0 },\n    { tier: 'Silver', threshold: 5000 },\n    { tier: 'Gold', threshold: 15000 },\n    { tier: 'Platinum', threshold: 30000 },\n    { tier: 'Diamond', threshold: 50000 },\n    { tier: 'Master', threshold: 75000 },\n    { tier: 'Grandmaster', threshold: 100000 }\n  ][nextTierIndex + 1] : null;\n  \n  const tierProgress = nextTier ? \n    ((currentScore - scoreTier.threshold) / (nextTier.threshold - scoreTier.threshold)) * 100 : \n    100;\n  \n  return (\n    <div className={`bg-white rounded-lg shadow-lg border-2 ${config.padding} ${config.spacing} ${className}`}>\n      {/* Main Score Display */}\n      <div className=\"text-center\">\n        <div className=\"flex items-center justify-center space-x-2\">\n          <span className={`font-bold ${config.scoreText} ${animationState.isAnimating ? 'animate-pulse' : ''}`}>\n            {formatScore(displayScore)}\n          </span>\n          \n          {/* Score increment animation */}\n          {animationState.isAnimating && animationState.scoreIncrement !== 0 && (\n            <span className={\n              `${config.tierText} font-semibold animate-bounce ${\n                animationState.scoreIncrement > 0 ? 'text-green-600' : 'text-red-600'\n              }`\n            }>\n              {animationState.scoreIncrement > 0 ? '+' : ''}{formatScore(animationState.scoreIncrement)}\n            </span>\n          )}\n        </div>\n        \n        <div className={`text-gray-600 ${config.tierText}`}>SCORE</div>\n      </div>\n      \n      {/* Tier Display */}\n      <div className=\"text-center\">\n        <div \n          className={`inline-flex items-center space-x-2 px-3 py-1 rounded-full ${config.tierText} font-semibold`}\n          style={{ \n            backgroundColor: `${scoreTier.color}20`,\n            border: `2px solid ${scoreTier.color}`,\n            color: scoreTier.color\n          }}\n        >\n          <span>‚≠ê</span>\n          <span>{scoreTier.tier}</span>\n        </div>\n        \n        {/* Progress to next tier */}\n        {nextTier && (\n          <div className=\"mt-2\">\n            <div className=\"flex justify-between text-xs text-gray-600 mb-1\">\n              <span>{scoreTier.tier}</span>\n              <span>{nextTier.tier}</span>\n            </div>\n            <div className=\"w-full bg-gray-200 rounded-full h-2\">\n              <div \n                className=\"bg-gradient-to-r from-blue-400 to-purple-500 h-2 rounded-full transition-all duration-500\"\n                style={{ width: `${Math.min(tierProgress, 100)}%` }}\n              />\n            </div>\n            <div className=\"text-xs text-gray-500 mt-1\">\n              {formatScore(nextTier.threshold - currentScore)} to {nextTier.tier}\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {/* Score Breakdown */}\n      {showBreakdown && lastScoreCalculation && (\n        <div className=\"border-t pt-3 mt-3\">\n          <div className={`font-semibold text-gray-700 mb-2 ${config.tierText}`}>Last Placement:</div>\n          <div className=\"space-y-1 text-xs\">\n            <div className=\"flex justify-between\">\n              <span>Base Points:</span>\n              <span className=\"font-mono\">+{formatScore(lastScoreCalculation.basePoints)}</span>\n            </div>\n            \n            {lastScoreCalculation.timeBonus > 0 && (\n              <div className=\"flex justify-between text-green-600\">\n                <span>Time Bonus:</span>\n                <span className=\"font-mono\">+{formatScore(lastScoreCalculation.timeBonus)}</span>\n              </div>\n            )}\n            \n            {lastScoreCalculation.streakPoints > 0 && (\n              <div className=\"flex justify-between text-orange-600\">\n                <span>Streak Bonus:</span>\n                <span className=\"font-mono\">+{formatScore(lastScoreCalculation.streakPoints)}</span>\n              </div>\n            )}\n            \n            {lastScoreCalculation.difficultyPoints > 0 && (\n              <div className=\"flex justify-between text-purple-600\">\n                <span>Difficulty Bonus:</span>\n                <span className=\"font-mono\">+{formatScore(lastScoreCalculation.difficultyPoints)}</span>\n              </div>\n            )}\n            \n            {lastScoreCalculation.regionalPoints > 0 && (\n              <div className=\"flex justify-between text-blue-600\">\n                <span>Regional Bonus:</span>\n                <span className=\"font-mono\">+{formatScore(lastScoreCalculation.regionalPoints)}</span>\n              </div>\n            )}\n            \n            <div className=\"border-t pt-1 mt-1 flex justify-between font-semibold\">\n              <span>Total:</span>\n              <span className={`font-mono ${\n                lastScoreCalculation.totalPoints > 0 ? 'text-green-600' : 'text-red-600'\n              }`}>\n                {lastScoreCalculation.totalPoints > 0 ? '+' : ''}{formatScore(lastScoreCalculation.totalPoints)}\n              </span>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ScoreDisplay;