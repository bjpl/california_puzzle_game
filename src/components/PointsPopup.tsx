import React, { useEffect, useState } from 'react';\nimport { ScoreCalculation, formatScore } from '../utils/scoring';\n\ninterface PointsPopupProps {\n  scoreCalculation: ScoreCalculation | null;\n  position: { x: number; y: number } | null;\n  isVisible: boolean;\n  duration?: number;\n  onComplete?: () => void;\n  className?: string;\n}\n\ninterface PopupState {\n  isAnimating: boolean;\n  opacity: number;\n  scale: number;\n  translateY: number;\n  phase: 'enter' | 'display' | 'exit';\n}\n\nconst POPUP_STYLES = {\n  positive: {\n    bg: 'bg-green-100',\n    border: 'border-green-400',\n    text: 'text-green-800',\n    shadow: 'shadow-green-200'\n  },\n  negative: {\n    bg: 'bg-red-100',\n    border: 'border-red-400',\n    text: 'text-red-800',\n    shadow: 'shadow-red-200'\n  },\n  excellent: {\n    bg: 'bg-gradient-to-r from-yellow-100 to-orange-100',\n    border: 'border-yellow-400',\n    text: 'text-yellow-800',\n    shadow: 'shadow-yellow-200'\n  }\n};\n\nexport const PointsPopup: React.FC<PointsPopupProps> = ({\n  scoreCalculation,\n  position,\n  isVisible,\n  duration = 2000,\n  onComplete,\n  className = ''\n}) => {\n  const [popupState, setPopupState] = useState<PopupState>({\n    isAnimating: false,\n    opacity: 0,\n    scale: 0.5,\n    translateY: 0,\n    phase: 'enter'\n  });\n  \n  const [shouldRender, setShouldRender] = useState(false);\n  \n  // Handle visibility changes and animations\n  useEffect(() => {\n    if (isVisible && scoreCalculation && position) {\n      setShouldRender(true);\n      \n      // Enter animation\n      setPopupState({\n        isAnimating: true,\n        opacity: 0,\n        scale: 0.5,\n        translateY: 0,\n        phase: 'enter'\n      });\n      \n      // Animate in\n      const enterTimer = setTimeout(() => {\n        setPopupState(prev => ({\n          ...prev,\n          opacity: 1,\n          scale: 1,\n          translateY: -20,\n          phase: 'display'\n        }));\n      }, 50);\n      \n      // Start exit animation\n      const exitTimer = setTimeout(() => {\n        setPopupState(prev => ({\n          ...prev,\n          opacity: 0,\n          scale: 0.8,\n          translateY: -40,\n          phase: 'exit'\n        }));\n      }, duration - 500);\n      \n      // Complete and cleanup\n      const completeTimer = setTimeout(() => {\n        setShouldRender(false);\n        setPopupState({\n          isAnimating: false,\n          opacity: 0,\n          scale: 0.5,\n          translateY: 0,\n          phase: 'enter'\n        });\n        \n        if (onComplete) {\n          onComplete();\n        }\n      }, duration);\n      \n      return () => {\n        clearTimeout(enterTimer);\n        clearTimeout(exitTimer);\n        clearTimeout(completeTimer);\n      };\n    } else {\n      setShouldRender(false);\n    }\n  }, [isVisible, scoreCalculation, position, duration, onComplete]);\n  \n  if (!shouldRender || !scoreCalculation || !position) {\n    return null;\n  }\n  \n  const isPositive = scoreCalculation.totalPoints > 0;\n  const isExcellent = scoreCalculation.totalPoints > 200; // High score threshold\n  \n  // Determine style based on score\n  const style = isExcellent ? POPUP_STYLES.excellent : \n                isPositive ? POPUP_STYLES.positive : \n                POPUP_STYLES.negative;\n  \n  // Get the appropriate icon\n  const getIcon = () => {\n    if (isExcellent) return 'üåü';\n    if (isPositive) return '‚úÖ';\n    return '‚ùå';\n  };\n  \n  // Breakdown components to show\n  const getBreakdownComponents = () => {\n    const components = [];\n    \n    if (scoreCalculation.timeBonus > 0) {\n      components.push({ label: 'Speed', value: scoreCalculation.timeBonus, icon: '‚ö°' });\n    }\n    \n    if (scoreCalculation.streakPoints > 0) {\n      components.push({ label: 'Streak', value: scoreCalculation.streakPoints, icon: 'üî•' });\n    }\n    \n    if (scoreCalculation.difficultyPoints > 0) {\n      components.push({ label: 'Difficulty', value: scoreCalculation.difficultyPoints, icon: 'üí™' });\n    }\n    \n    if (scoreCalculation.regionalPoints > 0) {\n      components.push({ label: 'Regional', value: scoreCalculation.regionalPoints, icon: 'üéØ' });\n    }\n    \n    if (scoreCalculation.modifiers.perfectPlacementBonus > 0) {\n      components.push({ label: 'Perfect', value: scoreCalculation.modifiers.perfectPlacementBonus, icon: 'üíé' });\n    }\n    \n    return components;\n  };\n  \n  const breakdownComponents = getBreakdownComponents();\n  const showBreakdown = breakdownComponents.length > 0 && isPositive;\n  \n  return (\n    <div \n      className={`fixed pointer-events-none z-50 ${className}`}\n      style={{\n        left: position.x - 75, // Center the popup\n        top: position.y - 50,\n        transform: `scale(${popupState.scale}) translateY(${popupState.translateY}px)`,\n        opacity: popupState.opacity,\n        transition: 'all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1)'\n      }}\n    >\n      <div className={\n        `${style.bg} ${style.border} ${style.text} ${style.shadow} ` +\n        `border-2 rounded-lg px-4 py-2 shadow-lg min-w-max text-center\n        ${isExcellent ? 'animate-pulse' : ''}`\n      }>\n        {/* Main score display */}\n        <div className=\"flex items-center justify-center space-x-2\">\n          <span className=\"text-lg\">{getIcon()}</span>\n          <span className=\"font-bold text-lg\">\n            {scoreCalculation.totalPoints > 0 ? '+' : ''}{formatScore(scoreCalculation.totalPoints)}\n          </span>\n        </div>\n        \n        {/* Breakdown for positive scores */}\n        {showBreakdown && (\n          <div className=\"mt-2 space-y-1\">\n            {breakdownComponents.slice(0, 3).map((component, index) => (\n              <div key={index} className=\"flex items-center justify-between text-xs space-x-2\">\n                <span className=\"flex items-center space-x-1\">\n                  <span>{component.icon}</span>\n                  <span>{component.label}</span>\n                </span>\n                <span className=\"font-semibold\">+{formatScore(component.value)}</span>\n              </div>\n            ))}\n            \n            {breakdownComponents.length > 3 && (\n              <div className=\"text-xs opacity-75\">\n                +{breakdownComponents.length - 3} more bonuses\n              </div>\n            )}\n          </div>\n        )}\n        \n        {/* Special effects for excellent scores */}\n        {isExcellent && (\n          <div className=\"absolute inset-0 pointer-events-none\">\n            {/* Sparkle effects */}\n            {[...Array(4)].map((_, i) => (\n              <div \n                key={i}\n                className=\"absolute animate-ping\"\n                style={{\n                  left: `${10 + (i * 25)}%`,\n                  top: `${10 + (i % 2) * 50}%`,\n                  animationDelay: `${i * 100}ms`,\n                  animationDuration: '1s'\n                }}\n              >\n                <span className=\"text-yellow-400 text-xs\">‚ú®</span>\n              </div>\n            ))}\n          </div>\n        )}\n        \n        {/* Streak indicator for combo achievements */}\n        {scoreCalculation.streakPoints > 0 && (\n          <div className=\"absolute -top-2 -right-2 bg-orange-400 text-orange-900 text-xs font-bold px-1 py-0.5 rounded-full animate-bounce\">\n            COMBO!\n          </div>\n        )}\n      </div>\n      \n      {/* Floating animation trail */}\n      {isPositive && popupState.phase === 'display' && (\n        <div className=\"absolute inset-0 pointer-events-none\">\n          {[...Array(3)].map((_, i) => (\n            <div \n              key={i}\n              className=\"absolute text-lg animate-ping\"\n              style={{\n                left: `${40 + (i * 20)}%`,\n                top: '50%',\n                animationDelay: `${i * 200}ms`,\n                animationDuration: '1.5s'\n              }}\n            >\n              <span className=\"opacity-60\">{isExcellent ? '‚≠ê' : 'üí´'}</span>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PointsPopup;