import React, { useEffect, useState } from 'react';\nimport { TimerState } from '../hooks/useTimer';\n\ninterface TimerProps {\n  timerState: TimerState;\n  showMilliseconds?: boolean;\n  size?: 'small' | 'medium' | 'large';\n  variant?: 'default' | 'countdown' | 'minimal';\n  urgencyThreshold?: number; // Percentage when to show urgency (for countdown)\n  className?: string;\n}\n\ninterface TimerDisplayConfig {\n  fontSize: string;\n  padding: string;\n  borderRadius: string;\n}\n\nconst sizeConfigs: Record<string, TimerDisplayConfig> = {\n  small: {\n    fontSize: 'text-lg',\n    padding: 'px-3 py-1',\n    borderRadius: 'rounded-md'\n  },\n  medium: {\n    fontSize: 'text-2xl',\n    padding: 'px-4 py-2',\n    borderRadius: 'rounded-lg'\n  },\n  large: {\n    fontSize: 'text-4xl',\n    padding: 'px-6 py-3',\n    borderRadius: 'rounded-xl'\n  }\n};\n\nexport const Timer: React.FC<TimerProps> = ({\n  timerState,\n  showMilliseconds = true,\n  size = 'medium',\n  variant = 'default',\n  urgencyThreshold = 20,\n  className = ''\n}) => {\n  const [pulse, setPulse] = useState(false);\n  const [lastSecond, setLastSecond] = useState(-1);\n  \n  const config = sizeConfigs[size];\n  const isCountdown = variant === 'countdown';\n  const displayTime = isCountdown ? timerState.formattedRemaining : timerState.formattedTime;\n  const progress = timerState.progressPercentage;\n  \n  // Determine urgency level for countdown\n  const isUrgent = isCountdown && progress > (100 - urgencyThreshold);\n  const isCritical = isCountdown && progress > 90;\n  \n  // Pulse effect for countdown\n  useEffect(() => {\n    if (isCountdown && timerState.isRunning) {\n      const currentSecond = Math.floor(timerState.remaining / 1000);\n      \n      if (currentSecond !== lastSecond && currentSecond <= 10 && currentSecond > 0) {\n        setPulse(true);\n        const timer = setTimeout(() => setPulse(false), 200);\n        return () => clearTimeout(timer);\n      }\n      \n      setLastSecond(currentSecond);\n    }\n  }, [timerState.remaining, isCountdown, timerState.isRunning, lastSecond]);\n  \n  // Get color scheme based on state\n  const getColorScheme = () => {\n    if (timerState.isCompleted) {\n      return 'bg-gray-100 text-gray-600 border-gray-300';\n    }\n    \n    if (timerState.isPaused) {\n      return 'bg-yellow-50 text-yellow-800 border-yellow-300';\n    }\n    \n    if (isCountdown) {\n      if (isCritical) {\n        return 'bg-red-100 text-red-800 border-red-400 shadow-red-200';\n      } else if (isUrgent) {\n        return 'bg-orange-100 text-orange-800 border-orange-400 shadow-orange-200';\n      }\n    }\n    \n    return 'bg-blue-50 text-blue-800 border-blue-300 shadow-blue-200';\n  };\n  \n  // Get animation classes\n  const getAnimationClasses = () => {\n    const classes = [];\n    \n    if (pulse && isCountdown) {\n      classes.push('animate-pulse');\n    }\n    \n    if (timerState.isRunning && isCritical) {\n      classes.push('animate-bounce');\n    }\n    \n    return classes.join(' ');\n  };\n  \n  if (variant === 'minimal') {\n    return (\n      <div className={`font-mono ${config.fontSize} ${getColorScheme().split(' ')[1]} ${className}`}>\n        {displayTime}\n      </div>\n    );\n  }\n  \n  return (\n    <div className={`relative ${className}`}>\n      {/* Progress bar for countdown */}\n      {isCountdown && (\n        <div className=\"w-full bg-gray-200 rounded-full h-2 mb-2\">\n          <div \n            className={`h-2 rounded-full transition-all duration-300 ${\n              isCritical ? 'bg-red-500' : isUrgent ? 'bg-orange-500' : 'bg-blue-500'\n            }`}\n            style={{ width: `${Math.max(0, 100 - progress)}%` }}\n          />\n        </div>\n      )}\n      \n      {/* Main timer display */}\n      <div className={\n        `font-mono ${config.fontSize} ${config.padding} ${config.borderRadius} ` +\n        `border-2 text-center shadow-lg transition-all duration-300 ` +\n        `${getColorScheme()} ${getAnimationClasses()}`\n      }>\n        {timerState.isPaused && (\n          <div className=\"absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center rounded-lg\">\n            <span className=\"text-white font-bold text-sm\">PAUSED</span>\n          </div>\n        )}\n        \n        <div className=\"flex items-center justify-center space-x-2\">\n          {/* Timer icon */}\n          <svg \n            className={`w-5 h-5 ${\n              timerState.isRunning && !timerState.isPaused ? 'animate-spin' : ''\n            }`} \n            fill=\"currentColor\" \n            viewBox=\"0 0 20 20\"\n          >\n            <path \n              fillRule=\"evenodd\" \n              d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z\" \n              clipRule=\"evenodd\" \n            />\n          </svg>\n          \n          {/* Time display */}\n          <span>{displayTime}</span>\n          \n          {/* Countdown indicator */}\n          {isCountdown && timerState.isRunning && (\n            <span className={`text-xs ${\n              isCritical ? 'text-red-600' : isUrgent ? 'text-orange-600' : 'text-blue-600'\n            }`}>\n              ‚è≥\n            </span>\n          )}\n        </div>\n        \n        {/* Best time indicator */}\n        {timerState.stats.bestTime && !isCountdown && (\n          <div className=\"text-xs mt-1 opacity-70\">\n            Best: {timerState.stats.bestTime ? \n              Math.floor(timerState.stats.bestTime / 1000) + 's' : \n              'N/A'\n            }\n          </div>\n        )}\n      </div>\n      \n      {/* Split times display */}\n      {timerState.splitTimes.length > 0 && variant === 'default' && (\n        <div className=\"mt-2 text-xs space-y-1\">\n          <div className=\"font-semibold text-gray-700\">Split Times:</div>\n          <div className=\"max-h-20 overflow-y-auto space-y-1\">\n            {timerState.splitTimes.slice(-3).map((split, index) => (\n              <div key={index} className=\"flex justify-between text-gray-600\">\n                <span>{split.name}</span>\n                <span className=\"font-mono\">\n                  {Math.floor(split.elapsed / 1000)}.{Math.floor((split.elapsed % 1000) / 10).toString().padStart(2, '0')}s\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      \n      {/* Time's up animation */}\n      {timerState.isCompleted && isCountdown && (\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <div className=\"bg-red-500 text-white px-4 py-2 rounded-lg font-bold animate-bounce\">\n            TIME'S UP!\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Timer;